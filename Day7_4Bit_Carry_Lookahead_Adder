module Day7_4Bit_Carry_Lookahead_Adder(
input [3:0] A, B,
input Cin,
output [3:0] S,
output Cout
    );
    wire p_0, p_1, p_2, p_3;
    wire g_0, g_1, g_2, g_3;
    wire [3:0] C;
    
    assign p_0 = A[0]^B[0];
    assign p_1 = A[1]^B[1];
    assign p_2 = A[2]^B[2];
    assign p_3 = A[3]^B[3];
    assign g_0 = A[0]&B[0];
    assign g_1 = A[1]&B[1];
    assign g_2 = A[2]&B[2];
    assign g_3 = A[3]&B[3];
    
    assign C[0] = g_0 | (p_0 & Cin);
    assign C[1] = g_1 | (p_1 & C[0]);
    assign C[2] = g_2 | (p_2 & C[1]);
    assign C[3] = g_3 | (p_3 & C[2]);
    
    assign S[0] = p_0 ^ Cin;
    assign S[1] = p_1 ^ C[0];
    assign S[2] = p_2 ^ C[1];
    assign S[3] = p_3 ^ C[2];
    assign Cout = C[3];
    
endmodule

---------------------------------------------------------------------------------------------------------------

module tb_Day7_4Bit_Carry_Lookahead_Adder;

    reg [3:0] A, B;
    reg Cin;
    wire [3:0] S;
    wire Cout;

    // Instantiate the DUT
    Day7_4Bit_Carry_Lookahead_Adder dut (
        .A(A),
        .B(B),
        .Cin(Cin),
        .S(S),
        .Cout(Cout)
    );

    integer i, j, k;
    initial begin     
        for (i = 0; i < 16; i = i + 1) begin
            for (j = 0; j < 16; j = j + 1) begin
                for (k = 0; k < 2; k = k + 1) begin
                    A = i;
                    B = j;
                    Cin = k;
                    #10;
                end
            end
        end

        $finish;
    end

endmodule
